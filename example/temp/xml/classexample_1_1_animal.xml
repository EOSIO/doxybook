<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classexample_1_1_animal" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>example::Animal</compoundname>
    <basecompoundref refid="classexample_1_1_animal_interface" prot="public" virt="non-virtual">example::AnimalInterface</basecompoundref>
    <derivedcompoundref refid="classexample_1_1_bird" prot="public" virt="non-virtual">example::Bird</derivedcompoundref>
    <includes refid="animal_8h" local="no">animal.h</includes>
    <innerclass refid="structexample_1_1_animal_1_1_result" prot="public">example::Animal::Result</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classexample_1_1_animal_1adc9e490a8ea5390fbcaf6ffa24c3ec69" prot="public" static="no">
        <name>Type</name>
        <enumvalue id="classexample_1_1_animal_1adc9e490a8ea5390fbcaf6ffa24c3ec69a6e5479b6b33bfb1d1ddcadee8c18bf5d" prot="public">
          <name>NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classexample_1_1_animal_1adc9e490a8ea5390fbcaf6ffa24c3ec69a4be27b9504bb7b14709c0315ea0b4ca3" prot="public">
          <name>INSECT</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classexample_1_1_animal_1adc9e490a8ea5390fbcaf6ffa24c3ec69a79d1b3d3c02b6b09d6abf608cf9045f6" prot="public">
          <name>AMPHIBIAN</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classexample_1_1_animal_1adc9e490a8ea5390fbcaf6ffa24c3ec69a6205637d5a9711b5bece4f961915bf59" prot="public">
          <name>BIRD</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classexample_1_1_animal_1adc9e490a8ea5390fbcaf6ffa24c3ec69a0c9b7474bcd06a73ad5c1ae3b0b05bb8" prot="public">
          <name>FISH</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classexample_1_1_animal_1adc9e490a8ea5390fbcaf6ffa24c3ec69a954a217544b4717d06254df10b3e4c34" prot="public">
          <name>REPTILE</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classexample_1_1_animal_1adc9e490a8ea5390fbcaf6ffa24c3ec69aa4d73065e1a5df2bd56d98ea430f3e68" prot="public">
          <name>MAMMAL</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The 6 classes of animal kingdom. </para>        </briefdescription>
        <detaileddescription>
<para>Lorem Ipsum Donor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/animal.h" line="43" column="1" bodyfile="src/animal.h" bodystart="43" bodyend="51"/>
      </memberdef>
      <memberdef kind="typedef" id="classexample_1_1_animal_1a3fc3e692a61c2e21080fef955df099d5" prot="public" static="no">
        <type>std::pair&lt; <ref refid="classexample_1_1_animal" kindref="compound">Animal</ref> *, <ref refid="classexample_1_1_animal" kindref="compound">Animal</ref> * &gt;</type>
        <definition>typedef std::pair&lt;Animal*, Animal*&gt; example::Animal::Parents</definition>
        <argsstring></argsstring>
        <name>Parents</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/animal.h" line="53" column="1" bodyfile="src/animal.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classexample_1_1_animal_1a77ebfd8268da42527748bc17f458c02c" prot="protected" static="no" mutable="no">
        <type><ref refid="classexample_1_1_animal" kindref="compound">Animal</ref> *</type>
        <definition>Animal* example::Animal::mother</definition>
        <argsstring></argsstring>
        <name>mother</name>
        <briefdescription>
<para>The pointer to the mother. </para>        </briefdescription>
        <detaileddescription>
<para>Can be null! </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/animal.h" line="124" column="1" bodyfile="src/animal.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classexample_1_1_animal_1aeaabef8bc7cd869f09db725e0fcc5092" prot="protected" static="no" mutable="no">
        <type><ref refid="classexample_1_1_animal" kindref="compound">Animal</ref> *</type>
        <definition>Animal* example::Animal::father</definition>
        <argsstring></argsstring>
        <name>father</name>
        <briefdescription>
<para>The pointer to the father. </para>        </briefdescription>
        <detaileddescription>
<para>Can be null! </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/animal.h" line="129" column="1" bodyfile="src/animal.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classexample_1_1_animal_1a9362efc813ef23964f7f6f57640a12e7" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string example::Animal::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/animal.h" line="130" column="1" bodyfile="src/animal.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classexample_1_1_animal_1a7ff2cbf990657553d95f6d15fb0f4568" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classexample_1_1_animal" kindref="compound">Animal</ref> *</type>
        <definition>static Animal* example::Animal::find_parent_by_name</definition>
        <argsstring>(Animal *child)</argsstring>
        <name>find_parent_by_name</name>
        <param>
          <type><ref refid="classexample_1_1_animal" kindref="compound">Animal</ref> *</type>
          <declname>child</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/animal.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classexample_1_1_animal_1a1d509e63586d5fe3edc86d393f88910b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classexample_1_1_animal" kindref="compound">Animal</ref> *</type>
        <definition>static Animal* example::Animal::find_child_by_name</definition>
        <argsstring>(Animal *parent)</argsstring>
        <name>find_child_by_name</name>
        <param>
          <type><ref refid="classexample_1_1_animal" kindref="compound">Animal</ref> *</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/animal.h" line="63" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classexample_1_1_animal_1acef1db6802de001a01c403afeca90c86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>example::Animal::Animal</definition>
        <argsstring>(Type type, const std::string &amp;name, Animal *mother=nullptr, Animal *father=nullptr)</argsstring>
        <name>Animal</name>
        <param>
          <type><ref refid="classexample_1_1_animal_1adc9e490a8ea5390fbcaf6ffa24c3ec69" kindref="member">Type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classexample_1_1_animal" kindref="compound">Animal</ref> *</type>
          <declname>mother</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classexample_1_1_animal" kindref="compound">Animal</ref> *</type>
          <declname>father</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>The main constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Use this constructor to allocate a new instance of <ref refid="classexample_1_1_animal" kindref="compound">Animal</ref> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the animal that matches <ref refid="classexample_1_1_animal_1adc9e490a8ea5390fbcaf6ffa24c3ec69" kindref="member">Animal::Type</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Any name to associate the animal with </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classexample_1_1_custom_exception" kindref="compound">CustomException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>If either only mother or father is assigned </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/animal.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classexample_1_1_animal_1a612d7d2e9631e6f241e871b3785f4cdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>example::Animal::Animal</definition>
        <argsstring>(const Animal &amp;other)=delete</argsstring>
        <name>Animal</name>
        <param>
          <type>const <ref refid="classexample_1_1_animal" kindref="compound">Animal</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/animal.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classexample_1_1_animal_1a29db85a24acf4fd5fb353c871eb086ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>example::Animal::Animal</definition>
        <argsstring>(Animal &amp;&amp;animal) noexcept</argsstring>
        <name>Animal</name>
        <param>
          <type><ref refid="classexample_1_1_animal" kindref="compound">Animal</ref> &amp;&amp;</type>
          <declname>animal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/animal.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classexample_1_1_animal_1a7b633f0bc3834108ca024d0c73dc135e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual example::Animal::~Animal</definition>
        <argsstring>()=default</argsstring>
        <name>~Animal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/animal.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classexample_1_1_animal_1affec460d5bc2fb8d650fcf5b7b8cf396" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void example::Animal::swap</definition>
        <argsstring>(Animal &amp;other) noexcept</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classexample_1_1_animal" kindref="compound">Animal</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/animal.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classexample_1_1_animal_1a77ea3286e2b43830a5443be76eec4c5f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int example::Animal::get_num_of_limbs</definition>
        <argsstring>() const  override</argsstring>
        <name>get_num_of_limbs</name>
        <reimplements refid="classexample_1_1_animal_interface_1a0300198be5798cfa0350fbb2fde4295e">get_num_of_limbs</reimplements>
        <briefdescription>
<para>Returns the number of limbs. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classexample_1_1_animal_1afc4972484d411d75bdc829be3502bb60" kindref="member">get_num_of_eyes</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/animal.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classexample_1_1_animal_1afc4972484d411d75bdc829be3502bb60" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int example::Animal::get_num_of_eyes</definition>
        <argsstring>() const  override</argsstring>
        <name>get_num_of_eyes</name>
        <reimplements refid="classexample_1_1_animal_interface_1a63c32ae61aa4ee35b3666b08ce3378f9">get_num_of_eyes</reimplements>
        <briefdescription>
<para>Returns the number of eyes. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classexample_1_1_animal_1a77ea3286e2b43830a5443be76eec4c5f" kindref="member">get_num_of_limbs</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/animal.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classexample_1_1_animal_1a80c789f01a9e211b821cfa57c27792fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool example::Animal::has_tail</definition>
        <argsstring>() const  override</argsstring>
        <name>has_tail</name>
        <reimplements refid="classexample_1_1_animal_interface_1af994135a8e875998808ca7f11f12a6b3">has_tail</reimplements>
        <briefdescription>
<para>Returns true if the animal has a tail. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classexample_1_1_animal_1a77ea3286e2b43830a5443be76eec4c5f" kindref="member">get_num_of_limbs</ref> </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Does have a tail </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Does not have a tail </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/animal.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classexample_1_1_animal_1aaee0d759d18beaca18670d2a794b1445" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void example::Animal::move</definition>
        <argsstring>()</argsstring>
        <name>move</name>
        <reimplementedby refid="classexample_1_1_bird_1aa3877f1e70aba0d25ef757c248f69d13">move</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/animal.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classexample_1_1_animal_1a6939f9fed1a387b128d3947afc239873" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void example::Animal::make_sound</definition>
        <argsstring>()=0</argsstring>
        <name>make_sound</name>
        <reimplementedby refid="classexample_1_1_bird_1ae61379b32b53508e9a2398305826667a">make_sound</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/animal.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classexample_1_1_animal_1a93c61aed16aeb0b52631961e17251b0f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Parents</type>
        <definition>Parents example::Animal::get_parents</definition>
        <argsstring>() const </argsstring>
        <name>get_parents</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/animal.h" line="102" column="1" bodyfile="src/animal.h" bodystart="102" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classexample_1_1_animal_1ab4e7a34b9637acc89c55eec9405f1f6e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; example::Animal::get_name</definition>
        <argsstring>() const </argsstring>
        <name>get_name</name>
        <briefdescription>
<para>Get the name of the animal. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A constant reference to the name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/animal.h" line="110" column="1" bodyfile="src/animal.h" bodystart="110" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classexample_1_1_animal_1a021864d5b75ff00550cd4ffe65f4014d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classexample_1_1_animal" kindref="compound">Animal</ref> &amp;</type>
        <definition>Animal&amp; example::Animal::operator=</definition>
        <argsstring>(const Animal &amp;other)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classexample_1_1_animal" kindref="compound">Animal</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/animal.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classexample_1_1_animal_1a055b1b5d5ffaa302068e7000b1b9f4f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classexample_1_1_animal" kindref="compound">Animal</ref> &amp;</type>
        <definition>Animal&amp; example::Animal::operator=</definition>
        <argsstring>(Animal &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classexample_1_1_animal" kindref="compound">Animal</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/animal.h" line="115" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classexample_1_1_animal_1aa7ca55f69abe84eade027036327d6f34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void some_global_function</definition>
        <argsstring>(Animal *animal)</argsstring>
        <name>some_global_function</name>
        <param>
          <type><ref refid="classexample_1_1_animal" kindref="compound">Animal</ref> *</type>
          <declname>animal</declname>
        </param>
        <briefdescription>
<para>Some random global function that modifies <ref refid="classexample_1_1_animal" kindref="compound">Animal</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classexample_1_1_animal" kindref="compound">Animal</ref> </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>animal</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the animal instance </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/animal.h" line="117" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for all animals from which <ref refid="classexample_1_1_bird" kindref="compound">Bird</ref> derives. </para>    </briefdescription>
    <detaileddescription>
<para>Lorem Ipsum Donor. Some <ulink url="http://github.com">Random link with <bold>bold</bold> and <emphasis>italics</emphasis></ulink> And the following is a <computeroutput>typewritter</computeroutput> font.</para><para>Example code:</para><para><programlisting><codeline><highlight class="normal">Animal<sp/>animal<sp/>=<sp/>Animal(&quot;Hello<sp/>World&quot;,<sp/>nullptr,<sp/>nullptr);</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>animal.get_name()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
</programlisting> <simplesect kind="see"><para><ref refid="classexample_1_1_bird" kindref="compound">Bird</ref> </para></simplesect>
<xrefsect id="bug_1_bug000001"><xreftitle>Bug</xreftitle><xrefdescription><para>Some random bug </para></xrefdescription></xrefsect><simplesect kind="note"><para>Some random note </para></simplesect>
<simplesect kind="warning"><para>Some random warning </para></simplesect>
<xrefsect id="test_1_test000001"><xreftitle>Test</xreftitle><xrefdescription><para>Some random test description </para></xrefdescription></xrefsect><xrefsect id="todo_1_todo000001"><xreftitle>Todo</xreftitle><xrefdescription><para>Some random todo </para></xrefdescription></xrefsect><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Some random template paramater description which actually does not exist in the code! </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>First initialize the system. </para></simplesect>
<simplesect kind="date"><para>2017-2018 </para></simplesect>
<simplesect kind="author"><para>Matus Novak </para></simplesect>
<simplesect kind="author"><para>Hello World </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>example::Bird</label>
        <link refid="classexample_1_1_bird"/>
        <childnode refid="0" relation="public-inheritance">
        </childnode>
      </node>
      <node id="0">
        <label>example::Animal</label>
        <link refid="classexample_1_1_animal"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>example::SpecialBird</label>
        <link refid="classexample_1_1_special_bird"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>example::AnimalInterface</label>
        <link refid="classexample_1_1_animal_interface"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>example::Animal</label>
        <link refid="classexample_1_1_animal"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>mother</edgelabel>
          <edgelabel>father</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>example::AnimalInterface</label>
        <link refid="classexample_1_1_animal_interface"/>
      </node>
    </collaborationgraph>
    <location file="src/animal.h" line="37" column="1" bodyfile="src/animal.h" bodystart="37" bodyend="131"/>
    <listofallmembers>
      <member refid="classexample_1_1_animal_1adc9e490a8ea5390fbcaf6ffa24c3ec69a79d1b3d3c02b6b09d6abf608cf9045f6" prot="public" virt="non-virtual"><scope>example::Animal</scope><name>AMPHIBIAN</name></member>
      <member refid="classexample_1_1_animal_1acef1db6802de001a01c403afeca90c86" prot="public" virt="non-virtual"><scope>example::Animal</scope><name>Animal</name></member>
      <member refid="classexample_1_1_animal_1a612d7d2e9631e6f241e871b3785f4cdf" prot="public" virt="non-virtual"><scope>example::Animal</scope><name>Animal</name></member>
      <member refid="classexample_1_1_animal_1a29db85a24acf4fd5fb353c871eb086ed" prot="public" virt="non-virtual"><scope>example::Animal</scope><name>Animal</name></member>
      <member refid="classexample_1_1_animal_1adc9e490a8ea5390fbcaf6ffa24c3ec69a6205637d5a9711b5bece4f961915bf59" prot="public" virt="non-virtual"><scope>example::Animal</scope><name>BIRD</name></member>
      <member refid="classexample_1_1_animal_1aeaabef8bc7cd869f09db725e0fcc5092" prot="protected" virt="non-virtual"><scope>example::Animal</scope><name>father</name></member>
      <member refid="classexample_1_1_animal_1a1d509e63586d5fe3edc86d393f88910b" prot="public" virt="non-virtual"><scope>example::Animal</scope><name>find_child_by_name</name></member>
      <member refid="classexample_1_1_animal_1a7ff2cbf990657553d95f6d15fb0f4568" prot="public" virt="non-virtual"><scope>example::Animal</scope><name>find_parent_by_name</name></member>
      <member refid="classexample_1_1_animal_1adc9e490a8ea5390fbcaf6ffa24c3ec69a0c9b7474bcd06a73ad5c1ae3b0b05bb8" prot="public" virt="non-virtual"><scope>example::Animal</scope><name>FISH</name></member>
      <member refid="classexample_1_1_animal_1ab4e7a34b9637acc89c55eec9405f1f6e" prot="public" virt="non-virtual"><scope>example::Animal</scope><name>get_name</name></member>
      <member refid="classexample_1_1_animal_1afc4972484d411d75bdc829be3502bb60" prot="public" virt="virtual"><scope>example::Animal</scope><name>get_num_of_eyes</name></member>
      <member refid="classexample_1_1_animal_1a77ea3286e2b43830a5443be76eec4c5f" prot="public" virt="virtual"><scope>example::Animal</scope><name>get_num_of_limbs</name></member>
      <member refid="classexample_1_1_animal_1a93c61aed16aeb0b52631961e17251b0f" prot="public" virt="non-virtual"><scope>example::Animal</scope><name>get_parents</name></member>
      <member refid="classexample_1_1_animal_1a80c789f01a9e211b821cfa57c27792fa" prot="public" virt="virtual"><scope>example::Animal</scope><name>has_tail</name></member>
      <member refid="classexample_1_1_animal_1adc9e490a8ea5390fbcaf6ffa24c3ec69a4be27b9504bb7b14709c0315ea0b4ca3" prot="public" virt="non-virtual"><scope>example::Animal</scope><name>INSECT</name></member>
      <member refid="classexample_1_1_animal_1a6939f9fed1a387b128d3947afc239873" prot="public" virt="pure-virtual"><scope>example::Animal</scope><name>make_sound</name></member>
      <member refid="classexample_1_1_animal_1adc9e490a8ea5390fbcaf6ffa24c3ec69aa4d73065e1a5df2bd56d98ea430f3e68" prot="public" virt="non-virtual"><scope>example::Animal</scope><name>MAMMAL</name></member>
      <member refid="classexample_1_1_animal_1a77ebfd8268da42527748bc17f458c02c" prot="protected" virt="non-virtual"><scope>example::Animal</scope><name>mother</name></member>
      <member refid="classexample_1_1_animal_1aaee0d759d18beaca18670d2a794b1445" prot="public" virt="virtual"><scope>example::Animal</scope><name>move</name></member>
      <member refid="classexample_1_1_animal_1a9362efc813ef23964f7f6f57640a12e7" prot="protected" virt="non-virtual"><scope>example::Animal</scope><name>name</name></member>
      <member refid="classexample_1_1_animal_1adc9e490a8ea5390fbcaf6ffa24c3ec69a6e5479b6b33bfb1d1ddcadee8c18bf5d" prot="public" virt="non-virtual"><scope>example::Animal</scope><name>NONE</name></member>
      <member refid="classexample_1_1_animal_1a021864d5b75ff00550cd4ffe65f4014d" prot="public" virt="non-virtual"><scope>example::Animal</scope><name>operator=</name></member>
      <member refid="classexample_1_1_animal_1a055b1b5d5ffaa302068e7000b1b9f4f7" prot="public" virt="non-virtual"><scope>example::Animal</scope><name>operator=</name></member>
      <member refid="classexample_1_1_animal_1a3fc3e692a61c2e21080fef955df099d5" prot="public" virt="non-virtual"><scope>example::Animal</scope><name>Parents</name></member>
      <member refid="classexample_1_1_animal_1adc9e490a8ea5390fbcaf6ffa24c3ec69a954a217544b4717d06254df10b3e4c34" prot="public" virt="non-virtual"><scope>example::Animal</scope><name>REPTILE</name></member>
      <member refid="classexample_1_1_animal_1aa7ca55f69abe84eade027036327d6f34" prot="public" virt="non-virtual"><scope>example::Animal</scope><name>some_global_function</name></member>
      <member refid="classexample_1_1_animal_1affec460d5bc2fb8d650fcf5b7b8cf396" prot="public" virt="non-virtual"><scope>example::Animal</scope><name>swap</name></member>
      <member refid="classexample_1_1_animal_1adc9e490a8ea5390fbcaf6ffa24c3ec69" prot="public" virt="non-virtual"><scope>example::Animal</scope><name>Type</name></member>
      <member refid="classexample_1_1_animal_1a7b633f0bc3834108ca024d0c73dc135e" prot="public" virt="virtual"><scope>example::Animal</scope><name>~Animal</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
